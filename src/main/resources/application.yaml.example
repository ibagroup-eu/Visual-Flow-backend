#
# Copyright (c) 2021 IBA Group, a.s. All rights reserved.
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Regardless of where you would run Visual Flow, it's backend API requires a correct application.yaml
# The purpose of this file is to serve as a guide to structure your own application.yaml
# Some of these fields have default values assigned to them, that can be changed, others are empty and must be filled in
server:
  ssl:
    key-store: ./tls.p12                          # path to p12 store file
    key-store-password: ${KEYSTORE_PASS}          # password for p12 store file
    key-store-type: pkcs12                        # store type
    key-alias: vf-key                             # name of key in p12 store file
    key-password: ${KEYSTORE_PASS}                # password for key in p12 store file
  host: ${HOST}                                   # host at which the application will be running
  port: 8080                                      # port at which the application will be running
  tomcat:
    accesslog:
      enabled: true                               # tomcat access log to track down each request
  servlet:
    context-path: ${BASE_PATH}                    # defines the base path to access the app
  error:                                          # enables the display of custom messages in server responses
      include-message: always
      include-binding-errors: always
db-service:
  host: ${DB_SERVICE_HOST}                        # Database Service host. Use HTTP protocol.
# See documentation about configuring authentication at this link: https://github.com/ibagomel/Visual-Flow-deploy/blob/main/OAUTH.md
oauth:
  url:
    userInfo: ${USERINFO_ENDPOINT}                # URL pointing to userInfo endpoint on oauth server (for ex. Github: https://api.github.com/user, Keycloak: {ADDRESS}/auth/realms/{REALM}/protocol/openid-connect/userinfo)
  provider: github                                # OAuth provider (it is used only in error messages).
# map between userInfo fields and json data from auth server(in our case from oauth server)
# in case some of the data is hidden behind multiple JSON objects, use dot . to go deeper into object hierarchy, i.e. auth.email: personal.info.email
auth:
  id:                                             # user id key in returned userinfo object (for ex. Github: id, Keycloak: sub)
  username:                                       # username key in returned userinfo object - supposed to be unique (for ex. Github: username, Keycloak: preferred_username)
  name:                                           # user's full name key in returned userinfo object (for ex. Github: name, Keycloak: name)
  email:                                          # email address key in returned userinfo object (for ex. Github: email, Keycloak: email)
superusers:
  set:
    # yaml list of user names(refers to auth.username). Example:
    # - github-nickname1
    # - nickname2
notifications:
  image:                                          # docker image in format repository:tag
  slack:
    token: ${TOKEN}                               # API token for slack app
  mail:
    default-encoding: UTF-8                       # Default-encoding
    host: smtp.gmail.com                          # An IP address or FQDN of the SMTP server
    username:                                     # The user name that will be used to connect to the SMTP server.
    password: ${PASSWORD}                         # The password of the SMTP user
    port: 587                                     # Usually 465 or 587.
    properties:
      mail:
        debug: false
        smtp:
          debug: false
          auth: true
          starttls: true
    protocol: smtp
    test-connection: false
namespace:
  label:                                          # value of "app" label in kubernetes resources generated by app
  app:                                            # namespace in Kubernetes where backend is deployed (or not deployed, but this namespace should contain job.imagePullSecret, job.spark.serviceAccount, job.spark.roleBinding and will contain service account of users logged to app)
  prefix: ${namespace.app}-                       # prefix for names of new namespaces created by app (app projects)
  # allows you to add custom namespace annotations in a key-value manner.
  # IMPORTANT: if the key has some special characters in it, it should be wrapped in double quotes and square brackets
  # this property is optional, if you don't need any custom annotations, feel free to remove the property, just don't leave it empty
  # annotations:                                  # Optional
    # simpleKey: simpleValue
    # "[complex/:/key]": someValue
    # "[openshift.io/sa.scc.mcs]": "s0:c25,c20"
    # "[openshift.io/sa.scc.supplemental-groups]": "1000/10000"
    # "[openshift.io/sa.scc.uid-range]": "1000/10000"
pvc:
  memory: 1Gi                                     # amount of memory for PVC
  mountPath: /files                               # PVC mount path to upload/download files
  accessModes: ReadWriteMany, ReadWriteOnce, ReadOnlyMany, ReadWriteOncePod  # PVC access modes, separated by comma. One or more elements can be declared inside this param, but remember,
                                                  # that all declared modes will be passed into PVC initialization for storing files when creating new projects.
job:
  imagePullSecret:                                # secret in kubernetes to pull jobs images (required). Backend copies this secret to each new namespace(app project)
  spark:
    master:                                       # Kubernetes API url. Starts with k8s://
    image:                                        # path to spark docker image in format repository:tag
    serviceAccount:                               # spark user service account. Backend copies this user to each new namespace(app project)
    roleBinding:                                  # role binding for spark user. Backend copies this role binding to each new namespace(app project)
argo:
  serverUrl: ${ARGO_SERVER_URL}                   # URL of argo server connected to Kubernetes
  limits:                                         # limits resource quota for argo executor
      cpu: 0.5
      memory: 512Mi
  requests:                                       # requests resource quota for argo executor
    cpu: 0.1
    memory: 64Mi
  ttlStrategy:
    secondsAfterCompletion: 5                     # SecondsAfterCompletion is the number of seconds to workflow instance live after completion
    secondsAfterSuccess: 5                        # SecondsAfterFailure is the number of seconds to workflow instance live after success
    secondsAfterFailure: 360                      # SecondsAfterSuccess is the number of seconds to workflow instance live after failure
redis:
  host: ${REDIS_HOST}                             # The connection host of Redis database.
  port: ${REDIS_PORT}                             # The connection port of Redis database.
  username: ${REDIS_USER}                         # The connection username of Redis database.
  password: ${REDIS_PASSWORD}                     # The connection password of Redis database.
  database: ${REDIS_DATABASE}                     # The connection database name of Redis database ("0" - by default).
# Kubernetes Client Http Logs
# enables logging for kubernetes client
# feel free to comment the whole block out if you don't need it
logging:
  level:
    okhttp3: TRACE                                # Optional
